name: Full Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.18.1'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run TypeScript check
      working-directory: ./frontend
      run: npx tsc --noEmit
      
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safe_pm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.18.1'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint
      
    - name: Run TypeScript check
      working-directory: ./backend
      run: npx tsc --noEmit
      
    - name: Setup test database
      working-directory: ./backend
      run: |
        npx knex migrate:latest --env test
        npx knex seed:run --env test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: safe_pm_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://localhost:6379
        
    - name: Run tests
      working-directory: ./backend
      run: npm test -- --coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: safe_pm_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://localhost:6379
        
    - name: Build application
      working-directory: ./backend
      run: npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safe_pm_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.18.1'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
        
    - name: Build applications
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build
        
    - name: Setup integration database
      working-directory: ./backend
      run: |
        npx knex migrate:latest
        npx knex seed:run
      env:
        NODE_ENV: development
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: safe_pm_integration
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://localhost:6379
        
    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3016/health || exit 1
      env:
        NODE_ENV: development
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: safe_pm_integration
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://localhost:6379
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3016/health
        
        # Test dashboard metrics
        curl -f "http://localhost:3016/api/dashboard/metrics?organizationId=550e8400-e29b-41d4-a716-446655440020"
        
        # Test release trains
        curl -f http://localhost:3016/api/dashboard/release-trains
        
        # Test activities
        curl -f "http://localhost:3016/api/dashboard/activities?limit=5"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, integration-tests]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi
