name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: ${{ github.repository }}/frontend
  BACKEND_IMAGE: ${{ github.repository }}/backend

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release Notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## Release ${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Docker Images:" >> $GITHUB_OUTPUT
        echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_OUTPUT
        echo "- Backend: \`${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Installation:" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false

  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-release-images]
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#safe-project-manager'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          ðŸš€ New Release: ${{ github.ref_name }}
          
          Docker Images:
          - Frontend: `${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}`
          - Backend: `${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}`
          
          View release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

